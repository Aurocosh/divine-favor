buildscript {
    ext.kotlin_version = kotlin_version
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id("net.minecraftforge.gradle.forge") version "2.0.2"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: "java"

repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://tehnut.info/maven"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven { // Bookshelf
        url = "https://maven.mcmoddev.com"
    }
    maven { // Patchouli
        url 'https://maven.blamejared.com'
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url "http://maven.shadowfacts.net/"
    }
    mavenCentral()
}

logging.level = LogLevel.DEBUG

version = "${mod_version}.${generateVersionCode()}"
println version

group = mod_group
archivesBaseName = mod_archivesBaseName

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "${mc_sub_version}-${forge_version}"
    runDir = "run"
    mappings = mc_mappings
    useDepAts = true
    makeObfSourceJar = true
}

dependencies {
    // compile against the JEI API but do not include it at runtime
    deobfProvided "mezz.jei:jei_${mc_sub_version}:${jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${mc_sub_version}:${jei_version}"

    compile "com.blamejared:MTLib:3.0.4.8"
    compile  "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${ct_version}"


    deobfProvided "mcp.mobius.waila:Hwyla:${hwyla_version}_${mc_sub_version}:api"
    runtime "mcp.mobius.waila:Hwyla:${hwyla_version}_${mc_sub_version}"

//    deobfCompile "mcjty.theoneprobe:TheOneProbe-${mc_version}:${mc_version}-1.4.14-7"
//    deobfCompile "com.github.mcjty:intwheel:${mc_version}-1.2.7"
    //compile "cofh:RedstoneFlux:1.12-2.1.0.6:universal"
    deobfCompile "vazkii.patchouli:Patchouli:${p_version}"
    deobfCompile "net.darkhax.bookshelf:Bookshelf-${mc_sub_version}:2.3.568"

    compile group: "net.shadowfacts", name: "Forgelin", version: "${forgelin_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

static def generateVersionCode() {
    def result = "git rev-list HEAD --count".execute().text.trim() //unix
    if(result.empty) result = "PowerShell -Command git rev-list HEAD --count".execute().text.trim() //windows
    if(result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    return result.toInteger()
}

jar {

}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'dev'
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}