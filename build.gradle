import org.gradle.internal.os.OperatingSystem;

buildscript {
    ext.kotlin_version = kotlin_version
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.2.0'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'java'

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven { // Patchouli
        url 'https://maven.blamejared.com'
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        url "http://maven.shadowfacts.net/"
    }
    maven {
        url "https://dl.bintray.com/aurocosh/Maven"
    }
    mavenCentral()
}

//logging.level = LogLevel.DEBUG
def currentReleaseType = getReleaseType()
version = "${mod_version}.${generateVersionCode()}"

println "Mod version: $version"
println "Release type: $currentReleaseType"
//println generateChangeLog('release')

group = mod_group
archivesBaseName = mod_archives_base_name

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "${mc_sub_version}-${forge_version}"
    runDir = "run"
    mappings = mc_mappings
    makeObfSourceJar = false
}

dependencies {
    // compile against the JEI API but do not include it at runtime
    deobfProvided "mezz.jei:jei_${mc_sub_version}:${jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${mc_sub_version}:${jei_version}"

    compile "com.blamejared:MTLib:3.0.4.8"
    compile  "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${ct_version}"

    deobfCompile "vazkii.patchouli:Patchouli:${p_version}"

    compile group: "net.shadowfacts", name: "Forgelin", version: "${forgelin_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlin_version}"
    compile "aurocosh.autonetworklib:autonetworklib-${mc_sub_version}:${auto_network_version}"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

static def generateVersionCode() {
    return shExec("git rev-list HEAD --count").toInteger()
}

static def getReleaseType() {
    def tags = shExec("git notes show", true)
    def isRelease = tags.contains('release')
    (isRelease) ? "release" : "beta"
}

static def generateChangeLog(releaseType) {
    def currentChange = shExec("git log --format=%B -n 1 HEAD")
    if(releaseType == 'beta')
        return currentChange

    def logWithNotes = shExec("git log origin/master --format=%H_%N")
    def matches = logWithNotes =~ '([0-9a-f]{5,40})_.*release'
    def lastReleaseHash = matches[1][1]

    def logFromPreviousBetas = shExec("git log --format=\"%s\" $lastReleaseHash..HEAD~1")
    return "Last change:\n$currentChange\n\nChangelog from previous beta versions:\n$logFromPreviousBetas"
}

static def shExec(command, ignoreEmpty = false) {
    if(OperatingSystem.current().isLinux())
        command = command.replaceAll('"','\\\\"')

    def resultBuilder = ''<<''
    def errorsBuilder = ''<<''
    def task = command.execute()
    task.waitForProcessOutput(resultBuilder, errorsBuilder)

    def result = resultBuilder.toString().trim()
    if(result.empty && !ignoreEmpty){
        def errors = errorsBuilder.toString().trim()
        throw new RuntimeException("Could not execute command $command. Cmd output: $result. Errors: $errors")
    }
    return result
}

jar {

}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ? System.getenv('CURSEFORGE_API_KEY') : ''
    project {
        id = curse_project_id
        changelog = generateChangeLog(currentReleaseType)
        releaseType = currentReleaseType
        relations {
            requiredDependency 'shadowfacts-forgelin'
            requiredDependency 'patchouli'
            requiredDependency 'auto-network-lib'
            optionalDependency 'jei'
            optionalDependency 'crafttweaker'
        }
    }
}